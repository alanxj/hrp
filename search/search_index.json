{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"hrp (HttpRunner+) \u00b6 hrp is a golang implementation of HttpRunner . Ideally, hrp will be fully compatible with HttpRunner, including testcase format and usage. What's more, hrp will integrate Boomer natively to be a better load generator for locust . Key Features \u00b6 Full support for HTTP(S) requests, more protocols are also in the plan. Testcases can be described in multiple formats, YAML / JSON / Golang , and they are interchangeable. With HAR support, you can use Charles/Fiddler/Chrome/etc as a script recording generator. Supports variables / extract / validate / hooks mechanisms to create extremely complex test scenarios. Built-in integration of rich functions, and you can also use go plugin to create and call custom functions. Inherit all powerful features of Boomer and locust , you can run load test without extra work. Use it as a CLI tool or as a library are both supported. Quick Start \u00b6 use as CLI tool \u00b6 $ go get -u github.com/httprunner/hrp/hrp Since installed, you will get a hrp command with multiple sub-commands. $ hrp -h hrp (HttpRunner+) is the next generation for HttpRunner. Enjoy! \u2728 \ud83d\ude80 \u2728 License: Apache-2.0 Github: https://github.com/httprunner/hrp Copyright 2021 debugtalk Usage: hrp [command] Available Commands: boom run load test with boomer completion generate the autocompletion script for the specified shell har2case Convert HAR to json/yaml testcase files help Help about any command run run API test Flags: -h, --help help for hrp --log-json set log to json format -l, --log-level string set log level (default \"INFO\") -v, --version version for hrp Use \"hrp [command] --help\" for more information about a command. You can use hrp run command to run HttpRunner JSON/YAML testcases. The following is an example running examples/demo.json $ hrp run examples/demo.json 8:04PM INF Set log to pretty console 8:04PM INF Set log level to INFO 8:04PM INF [init] SetDebug debug=true 8:04PM INF load json testcase path=/Users/debugtalk/MyProjects/HttpRunner-dev/hrp/examples/demo.json 8:04PM INF call function success arguments=[5] funcName=gen_random_string output=B64R8 8:04PM INF call function success arguments=[12.3,3.45] funcName=max output=12.3 8:04PM INF run testcase start testcase=\"demo with complex mechanisms\" 8:04PM INF call function success arguments=[12.3,34.5] funcName=max output=34.5 8:04PM INF run step start step=\"get with params\" -------------------- request -------------------- GET /get?foo1=B64R8&foo2=34.5 HTTP/1.1 Host: postman-echo.com User-Agent: HttpRunnerPlus ==================== response =================== HTTP/1.1 200 OK Content-Length: 304 Connection: keep-alive Content-Type: application/json; charset=utf-8 Date: Thu, 11 Nov 2021 12:04:32 GMT Etag: W/\"130-LUQ0LVU7KVSZha0O3nQxqPlr5dw\" Set-Cookie: sails.sid=s%3Ag6vZXrHHzs-B7Q1bFrYQq83dUje_EkSu.06vsqbkZvIOJ6mb1It7c6i354e%2B0t91K4cG14YFjSX0; Path=/; HttpOnly Vary: Accept-Encoding {\"args\":{\"foo1\":\"B64R8\",\"foo2\":\"34.5\"},\"headers\":{\"x-forwarded-proto\":\"https\",\"x-forwarded-port\":\"443\",\"host\":\"postman-echo.com\",\"x-amzn-trace-id\":\"Root=1-618d06d0-7516144f65e561a8238adab5\",\"user-agent\":\"HttpRunnerPlus\",\"accept-encoding\":\"gzip\"},\"url\":\"https://postman-echo.com/get?foo1=B64R8&foo2=34.5\"} -------------------------------------------------- 8:04PM INF extract value from=body.args.foo1 value=B64R8 8:04PM INF set variable value=B64R8 variable=varFoo1 8:04PM INF validate status_code assertMethod=equals checkValue=200 expectValue=200 result=true 8:04PM INF validate headers.\"Content-Type\" assertMethod=startswith checkValue=\"application/json; charset=utf-8\" expectValue=application/json result=true 8:04PM INF validate body.args.foo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true 8:04PM INF validate $varFoo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true 8:04PM INF validate body.args.foo2 assertMethod=equals checkValue=34.5 expectValue=34.5 result=true 8:04PM INF run step end exportVars={\"varFoo1\":\"B64R8\"} step=\"get with params\" success=true 8:04PM INF run step start step=\"post json data\" 8:04PM INF call function success arguments=[12.3,3.45] funcName=max output=12.3 -------------------- request -------------------- POST /post HTTP/1.1 Host: postman-echo.com Content-Type: application/json; charset=UTF-8 {\"foo1\":\"B64R8\",\"foo2\":12.3} ==================== response =================== HTTP/1.1 200 OK Content-Length: 424 Connection: keep-alive Content-Type: application/json; charset=utf-8 Date: Thu, 11 Nov 2021 12:04:32 GMT Etag: W/\"1a8-1umvYElau4WkHR7VON+jKXozT2c\" Set-Cookie: sails.sid=s%3AeNnS5IE6TBePzx95OfuwyIweJy5aExb0.7MH6Vb42vbZ6OhNT2nhQGcAmHgqcFmtM8X03Qsoxa1k; Path=/; HttpOnly Vary: Accept-Encoding {\"args\":{},\"data\":{\"foo1\":\"B64R8\",\"foo2\":12.3},\"files\":{},\"form\":{},\"headers\":{\"x-forwarded-proto\":\"https\",\"x-forwarded-port\":\"443\",\"host\":\"postman-echo.com\",\"x-amzn-trace-id\":\"Root=1-618d06d0-360475ad34903a97191978d7\",\"content-length\":\"28\",\"user-agent\":\"Go-http-client/1.1\",\"content-type\":\"application/json; charset=UTF-8\",\"accept-encoding\":\"gzip\"},\"json\":{\"foo1\":\"B64R8\",\"foo2\":12.3},\"url\":\"https://postman-echo.com/post\"} -------------------------------------------------- 8:04PM INF validate status_code assertMethod=equals checkValue=200 expectValue=200 result=true 8:04PM INF validate body.json.foo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true 8:04PM INF validate body.json.foo2 assertMethod=equals checkValue=12.3 expectValue=12.3 result=true 8:04PM INF run step end exportVars=null step=\"post json data\" success=true 8:04PM INF run step start step=\"post form data\" 8:04PM INF call function success arguments=[12.3,3.45] funcName=max output=12.3 -------------------- request -------------------- POST /post HTTP/1.1 Host: postman-echo.com Content-Type: application/x-www-form-urlencoded; charset=UTF-8 foo1=B64R8&foo2=12.3 ==================== response =================== HTTP/1.1 200 OK Content-Length: 445 Connection: keep-alive Content-Type: application/json; charset=utf-8 Date: Thu, 11 Nov 2021 12:04:32 GMT Etag: W/\"1bd-g/z+op+J2/U1DlrEv2g2VhZ0on4\" Set-Cookie: sails.sid=s%3ALfq9XEgKVT4dKQ8PnxUJ9-WSq4wI96Po.2P90TP9V2Pje3GNJ1hJmLcRRgcQy%2FDwBPF63Xdvdq4o; Path=/; HttpOnly Vary: Accept-Encoding {\"args\":{},\"data\":\"\",\"files\":{},\"form\":{\"foo1\":\"B64R8\",\"foo2\":\"12.3\"},\"headers\":{\"x-forwarded-proto\":\"https\",\"x-forwarded-port\":\"443\",\"host\":\"postman-echo.com\",\"x-amzn-trace-id\":\"Root=1-618d06d0-56d250242bf05b7144edf2cb\",\"content-length\":\"20\",\"user-agent\":\"Go-http-client/1.1\",\"content-type\":\"application/x-www-form-urlencoded; charset=UTF-8\",\"accept-encoding\":\"gzip\"},\"json\":{\"foo1\":\"B64R8\",\"foo2\":\"12.3\"},\"url\":\"https://postman-echo.com/post\"} -------------------------------------------------- 8:04PM INF validate status_code assertMethod=equals checkValue=200 expectValue=200 result=true 8:04PM INF validate body.form.foo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true 8:04PM INF validate body.form.foo2 assertMethod=equals checkValue=12.3 expectValue=12.3 result=true 8:04PM INF run step end exportVars=null step=\"post form data\" success=true 8:04PM INF run testcase end testcase=\"demo with complex mechanisms\" use as library \u00b6 Beside using hrp as a CLI tool, you can also use it as golang library. $ go get -u github.com/httprunner/hrp This is an example of HttpRunner+ testcase. You can find more in the examples directory. demo import ( \"testing\" \"github.com/httprunner/hrp\" ) func TestCaseDemo ( t * testing . T ) { testcase := & hrp . TestCase { Config : hrp . TConfig { Name : \"demo with complex mechanisms\" , BaseURL : \"https://postman-echo.com\" , Variables : map [ string ] interface {}{ // global level variables \"n\" : 5 , \"a\" : 12.3 , \"b\" : 3.45 , \"varFoo1\" : \"${gen_random_string($n)}\" , \"varFoo2\" : \"${max($a, $b)}\" , // 12.3; eval with built-in function }, }, TestSteps : [] hrp . IStep { hrp . Step ( \"get with params\" ). WithVariables ( map [ string ] interface {}{ // step level variables \"n\" : 3 , // inherit config level variables if not set in step level, a/varFoo1 \"b\" : 34.5 , // override config level variable if existed, n/b/varFoo2 \"varFoo2\" : \"${max($a, $b)}\" , // 34.5; override variable b and eval again }). GET ( \"/get\" ). WithParams ( map [ string ] interface {}{ \"foo1\" : \"$varFoo1\" , \"foo2\" : \"$varFoo2\" }). // request with params WithHeaders ( map [ string ] string { \"User-Agent\" : \"HttpRunnerPlus\" }). // request with headers Extract (). WithJmesPath ( \"body.args.foo1\" , \"varFoo1\" ). // extract variable with jmespath Validate (). AssertEqual ( \"status_code\" , 200 , \"check response status code\" ). // validate response status code AssertStartsWith ( \"headers.\\\"Content-Type\\\"\" , \"application/json\" , \"\" ). // validate response header AssertLengthEqual ( \"body.args.foo1\" , 5 , \"check args foo1\" ). // validate response body with jmespath AssertLengthEqual ( \"$varFoo1\" , 5 , \"check args foo1\" ). // assert with extracted variable from current step AssertEqual ( \"body.args.foo2\" , \"34.5\" , \"check args foo2\" ), // notice: request params value will be converted to string hrp . Step ( \"post json data\" ). POST ( \"/post\" ). WithBody ( map [ string ] interface {}{ \"foo1\" : \"$varFoo1\" , // reference former extracted variable \"foo2\" : \"${max($a, $b)}\" , // 12.3; step level variables are independent, variable b is 3.45 here }). Validate (). AssertEqual ( \"status_code\" , 200 , \"check status code\" ). AssertLengthEqual ( \"body.json.foo1\" , 5 , \"check args foo1\" ). AssertEqual ( \"body.json.foo2\" , 12.3 , \"check args foo2\" ), hrp . Step ( \"post form data\" ). POST ( \"/post\" ). WithHeaders ( map [ string ] string { \"Content-Type\" : \"application/x-www-form-urlencoded; charset=UTF-8\" }). WithBody ( map [ string ] interface {}{ \"foo1\" : \"$varFoo1\" , // reference former extracted variable \"foo2\" : \"${max($a, $b)}\" , // 12.3; step level variables are independent, variable b is 3.45 here }). Validate (). AssertEqual ( \"status_code\" , 200 , \"check status code\" ). AssertLengthEqual ( \"body.form.foo1\" , 5 , \"check args foo1\" ). AssertEqual ( \"body.form.foo2\" , \"12.3\" , \"check args foo2\" ), // form data will be converted to string }, } err := hrp . NewRunner ( nil ). Run ( demoTestCase ) // hrp.Run(demoTestCase) if err != nil { t . Fatalf ( \"run testcase error: %v\" , err ) } } Sponsors \u00b6 Thank you to all our sponsors! \u2728\ud83c\udf70\u2728 ( become a sponsor ) Gold Sponsor \u00b6 \u970d\u683c\u6c83\u5179\u6d4b\u8bd5\u5f00\u53d1\u5b66\u793e \u662f\u4e1a\u754c\u9886\u5148\u7684\u6d4b\u8bd5\u5f00\u53d1\u6280\u672f\u9ad8\u7aef\u6559\u80b2\u54c1\u724c\uff0c\u96b6\u5c5e\u4e8e \u6d4b\u5427\uff08\u5317\u4eac\uff09\u79d1\u6280\u6709\u9650\u516c\u53f8 \u3002\u5b66\u9662\u8bfe\u7a0b\u7531\u4e00\u7ebf\u5927\u5382\u6d4b\u8bd5\u7ecf\u7406\u4e0e\u8d44\u6df1\u6d4b\u8bd5\u5f00\u53d1\u4e13\u5bb6\u53c2\u4e0e\u7814\u53d1\uff0c\u5b9e\u6218\u9a71\u52a8\u3002\u8bfe\u7a0b\u6db5\u76d6 web/app \u81ea\u52a8\u5316\u6d4b\u8bd5\u3001\u63a5\u53e3\u6d4b\u8bd5\u3001\u6027\u80fd\u6d4b\u8bd5\u3001\u5b89\u5168\u6d4b\u8bd5\u3001\u6301\u7eed\u96c6\u6210/\u6301\u7eed\u4ea4\u4ed8/DevOps\uff0c\u6d4b\u8bd5\u5de6\u79fb&\u53f3\u79fb\u3001\u7cbe\u51c6\u6d4b\u8bd5\u3001\u6d4b\u8bd5\u5e73\u53f0\u5f00\u53d1\u3001\u6d4b\u8bd5\u7ba1\u7406\u7b49\u5185\u5bb9\uff0c\u5e2e\u52a9\u6d4b\u8bd5\u5de5\u7a0b\u5e08\u5b9e\u73b0\u6d4b\u8bd5\u5f00\u53d1\u6280\u672f\u8f6c\u578b\u3002\u901a\u8fc7\u4f18\u79c0\u7684\u5b66\u793e\u5236\u5ea6\uff08\u5956\u5b66\u91d1\u3001\u5185\u63a8\u8fd4\u5b66\u8d39\u3001\u884c\u4e1a\u7ade\u8d5b\u7b49\u591a\u79cd\u65b9\u5f0f\uff09\u6765\u5b9e\u73b0\u5b66\u5458\u3001\u5b66\u793e\u53ca\u7528\u4eba\u4f01\u4e1a\u7684\u4e09\u65b9\u5171\u8d62\u3002 \u8fdb\u5165\u6d4b\u8bd5\u5f00\u53d1\u6280\u672f\u80fd\u529b\u6d4b\u8bc4! Open Source Sponsor \u00b6 Subscribe \u00b6 \u5173\u6ce8 HttpRunner \u7684\u5fae\u4fe1\u516c\u4f17\u53f7\uff0c\u7b2c\u4e00\u65f6\u95f4\u83b7\u5f97\u6700\u65b0\u8d44\u8baf\u3002","title":"README"},{"location":"#hrp-httprunner","text":"hrp is a golang implementation of HttpRunner . Ideally, hrp will be fully compatible with HttpRunner, including testcase format and usage. What's more, hrp will integrate Boomer natively to be a better load generator for locust .","title":"hrp (HttpRunner+)"},{"location":"#key-features","text":"Full support for HTTP(S) requests, more protocols are also in the plan. Testcases can be described in multiple formats, YAML / JSON / Golang , and they are interchangeable. With HAR support, you can use Charles/Fiddler/Chrome/etc as a script recording generator. Supports variables / extract / validate / hooks mechanisms to create extremely complex test scenarios. Built-in integration of rich functions, and you can also use go plugin to create and call custom functions. Inherit all powerful features of Boomer and locust , you can run load test without extra work. Use it as a CLI tool or as a library are both supported.","title":"Key Features"},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#use-as-cli-tool","text":"$ go get -u github.com/httprunner/hrp/hrp Since installed, you will get a hrp command with multiple sub-commands. $ hrp -h hrp (HttpRunner+) is the next generation for HttpRunner. Enjoy! \u2728 \ud83d\ude80 \u2728 License: Apache-2.0 Github: https://github.com/httprunner/hrp Copyright 2021 debugtalk Usage: hrp [command] Available Commands: boom run load test with boomer completion generate the autocompletion script for the specified shell har2case Convert HAR to json/yaml testcase files help Help about any command run run API test Flags: -h, --help help for hrp --log-json set log to json format -l, --log-level string set log level (default \"INFO\") -v, --version version for hrp Use \"hrp [command] --help\" for more information about a command. You can use hrp run command to run HttpRunner JSON/YAML testcases. The following is an example running examples/demo.json $ hrp run examples/demo.json 8:04PM INF Set log to pretty console 8:04PM INF Set log level to INFO 8:04PM INF [init] SetDebug debug=true 8:04PM INF load json testcase path=/Users/debugtalk/MyProjects/HttpRunner-dev/hrp/examples/demo.json 8:04PM INF call function success arguments=[5] funcName=gen_random_string output=B64R8 8:04PM INF call function success arguments=[12.3,3.45] funcName=max output=12.3 8:04PM INF run testcase start testcase=\"demo with complex mechanisms\" 8:04PM INF call function success arguments=[12.3,34.5] funcName=max output=34.5 8:04PM INF run step start step=\"get with params\" -------------------- request -------------------- GET /get?foo1=B64R8&foo2=34.5 HTTP/1.1 Host: postman-echo.com User-Agent: HttpRunnerPlus ==================== response =================== HTTP/1.1 200 OK Content-Length: 304 Connection: keep-alive Content-Type: application/json; charset=utf-8 Date: Thu, 11 Nov 2021 12:04:32 GMT Etag: W/\"130-LUQ0LVU7KVSZha0O3nQxqPlr5dw\" Set-Cookie: sails.sid=s%3Ag6vZXrHHzs-B7Q1bFrYQq83dUje_EkSu.06vsqbkZvIOJ6mb1It7c6i354e%2B0t91K4cG14YFjSX0; Path=/; HttpOnly Vary: Accept-Encoding {\"args\":{\"foo1\":\"B64R8\",\"foo2\":\"34.5\"},\"headers\":{\"x-forwarded-proto\":\"https\",\"x-forwarded-port\":\"443\",\"host\":\"postman-echo.com\",\"x-amzn-trace-id\":\"Root=1-618d06d0-7516144f65e561a8238adab5\",\"user-agent\":\"HttpRunnerPlus\",\"accept-encoding\":\"gzip\"},\"url\":\"https://postman-echo.com/get?foo1=B64R8&foo2=34.5\"} -------------------------------------------------- 8:04PM INF extract value from=body.args.foo1 value=B64R8 8:04PM INF set variable value=B64R8 variable=varFoo1 8:04PM INF validate status_code assertMethod=equals checkValue=200 expectValue=200 result=true 8:04PM INF validate headers.\"Content-Type\" assertMethod=startswith checkValue=\"application/json; charset=utf-8\" expectValue=application/json result=true 8:04PM INF validate body.args.foo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true 8:04PM INF validate $varFoo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true 8:04PM INF validate body.args.foo2 assertMethod=equals checkValue=34.5 expectValue=34.5 result=true 8:04PM INF run step end exportVars={\"varFoo1\":\"B64R8\"} step=\"get with params\" success=true 8:04PM INF run step start step=\"post json data\" 8:04PM INF call function success arguments=[12.3,3.45] funcName=max output=12.3 -------------------- request -------------------- POST /post HTTP/1.1 Host: postman-echo.com Content-Type: application/json; charset=UTF-8 {\"foo1\":\"B64R8\",\"foo2\":12.3} ==================== response =================== HTTP/1.1 200 OK Content-Length: 424 Connection: keep-alive Content-Type: application/json; charset=utf-8 Date: Thu, 11 Nov 2021 12:04:32 GMT Etag: W/\"1a8-1umvYElau4WkHR7VON+jKXozT2c\" Set-Cookie: sails.sid=s%3AeNnS5IE6TBePzx95OfuwyIweJy5aExb0.7MH6Vb42vbZ6OhNT2nhQGcAmHgqcFmtM8X03Qsoxa1k; Path=/; HttpOnly Vary: Accept-Encoding {\"args\":{},\"data\":{\"foo1\":\"B64R8\",\"foo2\":12.3},\"files\":{},\"form\":{},\"headers\":{\"x-forwarded-proto\":\"https\",\"x-forwarded-port\":\"443\",\"host\":\"postman-echo.com\",\"x-amzn-trace-id\":\"Root=1-618d06d0-360475ad34903a97191978d7\",\"content-length\":\"28\",\"user-agent\":\"Go-http-client/1.1\",\"content-type\":\"application/json; charset=UTF-8\",\"accept-encoding\":\"gzip\"},\"json\":{\"foo1\":\"B64R8\",\"foo2\":12.3},\"url\":\"https://postman-echo.com/post\"} -------------------------------------------------- 8:04PM INF validate status_code assertMethod=equals checkValue=200 expectValue=200 result=true 8:04PM INF validate body.json.foo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true 8:04PM INF validate body.json.foo2 assertMethod=equals checkValue=12.3 expectValue=12.3 result=true 8:04PM INF run step end exportVars=null step=\"post json data\" success=true 8:04PM INF run step start step=\"post form data\" 8:04PM INF call function success arguments=[12.3,3.45] funcName=max output=12.3 -------------------- request -------------------- POST /post HTTP/1.1 Host: postman-echo.com Content-Type: application/x-www-form-urlencoded; charset=UTF-8 foo1=B64R8&foo2=12.3 ==================== response =================== HTTP/1.1 200 OK Content-Length: 445 Connection: keep-alive Content-Type: application/json; charset=utf-8 Date: Thu, 11 Nov 2021 12:04:32 GMT Etag: W/\"1bd-g/z+op+J2/U1DlrEv2g2VhZ0on4\" Set-Cookie: sails.sid=s%3ALfq9XEgKVT4dKQ8PnxUJ9-WSq4wI96Po.2P90TP9V2Pje3GNJ1hJmLcRRgcQy%2FDwBPF63Xdvdq4o; Path=/; HttpOnly Vary: Accept-Encoding {\"args\":{},\"data\":\"\",\"files\":{},\"form\":{\"foo1\":\"B64R8\",\"foo2\":\"12.3\"},\"headers\":{\"x-forwarded-proto\":\"https\",\"x-forwarded-port\":\"443\",\"host\":\"postman-echo.com\",\"x-amzn-trace-id\":\"Root=1-618d06d0-56d250242bf05b7144edf2cb\",\"content-length\":\"20\",\"user-agent\":\"Go-http-client/1.1\",\"content-type\":\"application/x-www-form-urlencoded; charset=UTF-8\",\"accept-encoding\":\"gzip\"},\"json\":{\"foo1\":\"B64R8\",\"foo2\":\"12.3\"},\"url\":\"https://postman-echo.com/post\"} -------------------------------------------------- 8:04PM INF validate status_code assertMethod=equals checkValue=200 expectValue=200 result=true 8:04PM INF validate body.form.foo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true 8:04PM INF validate body.form.foo2 assertMethod=equals checkValue=12.3 expectValue=12.3 result=true 8:04PM INF run step end exportVars=null step=\"post form data\" success=true 8:04PM INF run testcase end testcase=\"demo with complex mechanisms\"","title":"use as CLI tool"},{"location":"#use-as-library","text":"Beside using hrp as a CLI tool, you can also use it as golang library. $ go get -u github.com/httprunner/hrp This is an example of HttpRunner+ testcase. You can find more in the examples directory. demo import ( \"testing\" \"github.com/httprunner/hrp\" ) func TestCaseDemo ( t * testing . T ) { testcase := & hrp . TestCase { Config : hrp . TConfig { Name : \"demo with complex mechanisms\" , BaseURL : \"https://postman-echo.com\" , Variables : map [ string ] interface {}{ // global level variables \"n\" : 5 , \"a\" : 12.3 , \"b\" : 3.45 , \"varFoo1\" : \"${gen_random_string($n)}\" , \"varFoo2\" : \"${max($a, $b)}\" , // 12.3; eval with built-in function }, }, TestSteps : [] hrp . IStep { hrp . Step ( \"get with params\" ). WithVariables ( map [ string ] interface {}{ // step level variables \"n\" : 3 , // inherit config level variables if not set in step level, a/varFoo1 \"b\" : 34.5 , // override config level variable if existed, n/b/varFoo2 \"varFoo2\" : \"${max($a, $b)}\" , // 34.5; override variable b and eval again }). GET ( \"/get\" ). WithParams ( map [ string ] interface {}{ \"foo1\" : \"$varFoo1\" , \"foo2\" : \"$varFoo2\" }). // request with params WithHeaders ( map [ string ] string { \"User-Agent\" : \"HttpRunnerPlus\" }). // request with headers Extract (). WithJmesPath ( \"body.args.foo1\" , \"varFoo1\" ). // extract variable with jmespath Validate (). AssertEqual ( \"status_code\" , 200 , \"check response status code\" ). // validate response status code AssertStartsWith ( \"headers.\\\"Content-Type\\\"\" , \"application/json\" , \"\" ). // validate response header AssertLengthEqual ( \"body.args.foo1\" , 5 , \"check args foo1\" ). // validate response body with jmespath AssertLengthEqual ( \"$varFoo1\" , 5 , \"check args foo1\" ). // assert with extracted variable from current step AssertEqual ( \"body.args.foo2\" , \"34.5\" , \"check args foo2\" ), // notice: request params value will be converted to string hrp . Step ( \"post json data\" ). POST ( \"/post\" ). WithBody ( map [ string ] interface {}{ \"foo1\" : \"$varFoo1\" , // reference former extracted variable \"foo2\" : \"${max($a, $b)}\" , // 12.3; step level variables are independent, variable b is 3.45 here }). Validate (). AssertEqual ( \"status_code\" , 200 , \"check status code\" ). AssertLengthEqual ( \"body.json.foo1\" , 5 , \"check args foo1\" ). AssertEqual ( \"body.json.foo2\" , 12.3 , \"check args foo2\" ), hrp . Step ( \"post form data\" ). POST ( \"/post\" ). WithHeaders ( map [ string ] string { \"Content-Type\" : \"application/x-www-form-urlencoded; charset=UTF-8\" }). WithBody ( map [ string ] interface {}{ \"foo1\" : \"$varFoo1\" , // reference former extracted variable \"foo2\" : \"${max($a, $b)}\" , // 12.3; step level variables are independent, variable b is 3.45 here }). Validate (). AssertEqual ( \"status_code\" , 200 , \"check status code\" ). AssertLengthEqual ( \"body.form.foo1\" , 5 , \"check args foo1\" ). AssertEqual ( \"body.form.foo2\" , \"12.3\" , \"check args foo2\" ), // form data will be converted to string }, } err := hrp . NewRunner ( nil ). Run ( demoTestCase ) // hrp.Run(demoTestCase) if err != nil { t . Fatalf ( \"run testcase error: %v\" , err ) } }","title":"use as library"},{"location":"#sponsors","text":"Thank you to all our sponsors! \u2728\ud83c\udf70\u2728 ( become a sponsor )","title":"Sponsors"},{"location":"#gold-sponsor","text":"\u970d\u683c\u6c83\u5179\u6d4b\u8bd5\u5f00\u53d1\u5b66\u793e \u662f\u4e1a\u754c\u9886\u5148\u7684\u6d4b\u8bd5\u5f00\u53d1\u6280\u672f\u9ad8\u7aef\u6559\u80b2\u54c1\u724c\uff0c\u96b6\u5c5e\u4e8e \u6d4b\u5427\uff08\u5317\u4eac\uff09\u79d1\u6280\u6709\u9650\u516c\u53f8 \u3002\u5b66\u9662\u8bfe\u7a0b\u7531\u4e00\u7ebf\u5927\u5382\u6d4b\u8bd5\u7ecf\u7406\u4e0e\u8d44\u6df1\u6d4b\u8bd5\u5f00\u53d1\u4e13\u5bb6\u53c2\u4e0e\u7814\u53d1\uff0c\u5b9e\u6218\u9a71\u52a8\u3002\u8bfe\u7a0b\u6db5\u76d6 web/app \u81ea\u52a8\u5316\u6d4b\u8bd5\u3001\u63a5\u53e3\u6d4b\u8bd5\u3001\u6027\u80fd\u6d4b\u8bd5\u3001\u5b89\u5168\u6d4b\u8bd5\u3001\u6301\u7eed\u96c6\u6210/\u6301\u7eed\u4ea4\u4ed8/DevOps\uff0c\u6d4b\u8bd5\u5de6\u79fb&\u53f3\u79fb\u3001\u7cbe\u51c6\u6d4b\u8bd5\u3001\u6d4b\u8bd5\u5e73\u53f0\u5f00\u53d1\u3001\u6d4b\u8bd5\u7ba1\u7406\u7b49\u5185\u5bb9\uff0c\u5e2e\u52a9\u6d4b\u8bd5\u5de5\u7a0b\u5e08\u5b9e\u73b0\u6d4b\u8bd5\u5f00\u53d1\u6280\u672f\u8f6c\u578b\u3002\u901a\u8fc7\u4f18\u79c0\u7684\u5b66\u793e\u5236\u5ea6\uff08\u5956\u5b66\u91d1\u3001\u5185\u63a8\u8fd4\u5b66\u8d39\u3001\u884c\u4e1a\u7ade\u8d5b\u7b49\u591a\u79cd\u65b9\u5f0f\uff09\u6765\u5b9e\u73b0\u5b66\u5458\u3001\u5b66\u793e\u53ca\u7528\u4eba\u4f01\u4e1a\u7684\u4e09\u65b9\u5171\u8d62\u3002 \u8fdb\u5165\u6d4b\u8bd5\u5f00\u53d1\u6280\u672f\u80fd\u529b\u6d4b\u8bc4!","title":"Gold Sponsor"},{"location":"#open-source-sponsor","text":"","title":"Open Source Sponsor"},{"location":"#subscribe","text":"\u5173\u6ce8 HttpRunner \u7684\u5fae\u4fe1\u516c\u4f17\u53f7\uff0c\u7b2c\u4e00\u65f6\u95f4\u83b7\u5f97\u6700\u65b0\u8d44\u8baf\u3002","title":"Subscribe"},{"location":"CHANGELOG/","text":"Release History \u00b6 v0.2.0 (2021-11-19) \u00b6 feat: deploy mkdocs to github pages when PR merged feat: release hrp cli binaries automatically with github actions feat: add Makefile for running unittest and building hrp cli binary v0.1.0 (2021-11-18) \u00b6 feat: full support for HTTP(S)/1.1 methods feat: integrate zerolog for logging, include json log and pretty color console log feat: implement har2case for converting HAR to JSON/YAML testcases feat: extract and validate json response with jmespath feat: run JSON/YAML testcases with builtin functions feat: support testcase and teststep level variables mechanism feat: integrate boomer standalone mode for load testing docs: init documentation website with mkdocs docs: add project badges, including go report card, codecov, github actions, FOSSA, etc. test: add CI test with github actions test: integrate sentry sdk for event reporting and analysis","title":"Release History"},{"location":"CHANGELOG/#release-history","text":"","title":"Release History"},{"location":"CHANGELOG/#v020-2021-11-19","text":"feat: deploy mkdocs to github pages when PR merged feat: release hrp cli binaries automatically with github actions feat: add Makefile for running unittest and building hrp cli binary","title":"v0.2.0 (2021-11-19)"},{"location":"CHANGELOG/#v010-2021-11-18","text":"feat: full support for HTTP(S)/1.1 methods feat: integrate zerolog for logging, include json log and pretty color console log feat: implement har2case for converting HAR to JSON/YAML testcases feat: extract and validate json response with jmespath feat: run JSON/YAML testcases with builtin functions feat: support testcase and teststep level variables mechanism feat: integrate boomer standalone mode for load testing docs: init documentation website with mkdocs docs: add project badges, including go report card, codecov, github actions, FOSSA, etc. test: add CI test with github actions test: integrate sentry sdk for event reporting and analysis","title":"v0.1.0 (2021-11-18)"},{"location":"installation/","text":"Installation \u00b6 HttpRunner+ is developed with Golang, it supports Go 1.13+ and most operating systems. Combination of Go 1.13/1.14/1.15/1.16/1.17 and macOS/Linux/Windows are tested continuously on GitHub-Actions . install as CLI tool \u00b6 $ go get -u github.com/httprunner/hrp/hrp Since installed, you will get a hrp command with multiple sub-commands. $ hrp -h hrp (HttpRunner+) is the next generation for HttpRunner. Enjoy! \u2728 \ud83d\ude80 \u2728 License: Apache-2.0 Github: https://github.com/httprunner/hrp Copyright 2021 debugtalk Usage: hrp [command] Available Commands: boom run load test with boomer completion generate the autocompletion script for the specified shell har2case Convert HAR to json/yaml testcase files help Help about any command run run API test Flags: -h, --help help for hrp --log-json set log to json format -l, --log-level string set log level (default \"INFO\") -v, --version version for hrp Use \"hrp [command] --help\" for more information about a command. install as library \u00b6 Beside using hrp as a CLI tool, you can also use it as golang library. $ go get -u github.com/httprunner/hrp Then you can import github.com/httprunner/hrp and write testcases in Golang.","title":"Installation"},{"location":"installation/#installation","text":"HttpRunner+ is developed with Golang, it supports Go 1.13+ and most operating systems. Combination of Go 1.13/1.14/1.15/1.16/1.17 and macOS/Linux/Windows are tested continuously on GitHub-Actions .","title":"Installation"},{"location":"installation/#install-as-cli-tool","text":"$ go get -u github.com/httprunner/hrp/hrp Since installed, you will get a hrp command with multiple sub-commands. $ hrp -h hrp (HttpRunner+) is the next generation for HttpRunner. Enjoy! \u2728 \ud83d\ude80 \u2728 License: Apache-2.0 Github: https://github.com/httprunner/hrp Copyright 2021 debugtalk Usage: hrp [command] Available Commands: boom run load test with boomer completion generate the autocompletion script for the specified shell har2case Convert HAR to json/yaml testcase files help Help about any command run run API test Flags: -h, --help help for hrp --log-json set log to json format -l, --log-level string set log level (default \"INFO\") -v, --version version for hrp Use \"hrp [command] --help\" for more information about a command.","title":"install as CLI tool"},{"location":"installation/#install-as-library","text":"Beside using hrp as a CLI tool, you can also use it as golang library. $ go get -u github.com/httprunner/hrp Then you can import github.com/httprunner/hrp and write testcases in Golang.","title":"install as library"},{"location":"sponsors/","text":"\u8d5e\u52a9\u5546 \u00b6 \u611f\u8c22\u5404\u4f4d\u5bf9 HttpRunner \u7684\u8d5e\u52a9\u652f\u6301\uff01 \u91d1\u724c\u8d5e\u52a9\u5546\uff08Gold Sponsor\uff09 \u00b6 \u970d\u683c\u6c83\u5179\u6d4b\u8bd5\u5f00\u53d1\u5b66\u793e \u662f\u4e1a\u754c\u9886\u5148\u7684\u6d4b\u8bd5\u5f00\u53d1\u6280\u672f\u9ad8\u7aef\u6559\u80b2\u54c1\u724c\uff0c\u96b6\u5c5e\u4e8e \u6d4b\u5427\uff08\u5317\u4eac\uff09\u79d1\u6280\u6709\u9650\u516c\u53f8 \u3002\u5b66\u9662\u8bfe\u7a0b\u7531\u4e00\u7ebf\u5927\u5382\u6d4b\u8bd5\u7ecf\u7406\u4e0e\u8d44\u6df1\u6d4b\u8bd5\u5f00\u53d1\u4e13\u5bb6\u53c2\u4e0e\u7814\u53d1\uff0c\u5b9e\u6218\u9a71\u52a8\u3002\u8bfe\u7a0b\u6db5\u76d6 web/app \u81ea\u52a8\u5316\u6d4b\u8bd5\u3001\u63a5\u53e3\u6d4b\u8bd5\u3001\u6027\u80fd\u6d4b\u8bd5\u3001\u5b89\u5168\u6d4b\u8bd5\u3001\u6301\u7eed\u96c6\u6210/\u6301\u7eed\u4ea4\u4ed8/DevOps\uff0c\u6d4b\u8bd5\u5de6\u79fb&\u53f3\u79fb\u3001\u7cbe\u51c6\u6d4b\u8bd5\u3001\u6d4b\u8bd5\u5e73\u53f0\u5f00\u53d1\u3001\u6d4b\u8bd5\u7ba1\u7406\u7b49\u5185\u5bb9\uff0c\u5e2e\u52a9\u6d4b\u8bd5\u5de5\u7a0b\u5e08\u5b9e\u73b0\u6d4b\u8bd5\u5f00\u53d1\u6280\u672f\u8f6c\u578b\u3002\u901a\u8fc7\u4f18\u79c0\u7684\u5b66\u793e\u5236\u5ea6\uff08\u5956\u5b66\u91d1\u3001\u5185\u63a8\u8fd4\u5b66\u8d39\u3001\u884c\u4e1a\u7ade\u8d5b\u7b49\u591a\u79cd\u65b9\u5f0f\uff09\u6765\u5b9e\u73b0\u5b66\u5458\u3001\u5b66\u793e\u53ca\u7528\u4eba\u4f01\u4e1a\u7684\u4e09\u65b9\u5171\u8d62\u3002 \u8fdb\u5165\u6d4b\u8bd5\u5f00\u53d1\u6280\u672f\u80fd\u529b\u6d4b\u8bc4! \u5f00\u6e90\u670d\u52a1\u8d5e\u52a9\u5546\uff08Open Source Sponsor\uff09 \u00b6 HttpRunner is in Sentry Sponsored plan. \u6210\u4e3a\u8d5e\u52a9\u5546 \u00b6 \u5982\u679c\u4f60\u6240\u5728\u7684\u516c\u53f8\u6216\u4e2a\u4eba\u4e5f\u60f3\u5bf9 HttpRunner \u8fdb\u884c\u8d5e\u52a9\uff0c\u53ef\u53c2\u8003\u5982\u4e0b\u65b9\u6848\uff0c\u5177\u4f53\u53ef\u8054\u7cfb \u9879\u76ee\u4f5c\u8005 \u3002 \u7b49\u7ea7 \u91d1\u724c\u8d5e\u52a9\u5546 \uff08Gold Sponsor\uff09 \u94f6\u724c\u8d5e\u52a9\u5546 \uff08Silver Sponsor\uff09 \u4e2a\u4eba\u8d5e\u8d4f \u91d1\u989d \uffe520000/\u5e74 \uffe58000/\u5e74 \u4efb\u610f \u6743\u76ca \u516c\u53f8 logo\uff08\u5927\uff09\u548c\u94fe\u63a5\u5c55\u793a\u5728 README.md 200 \u5b57\u7684\u5ba3\u4f20\u6587\u6848 \u516c\u53f8 logo\uff08\u4e2d\uff09\u548c\u94fe\u63a5\u5c55\u793a\u5728 README.md 80 \u5b57\u7684\u5ba3\u4f20\u6587\u6848 \u4e2a\u4eba ID \u548c\u94fe\u63a5\u5c55\u793a\u5728 sponsors.md","title":"Sponsors"},{"location":"sponsors/#_1","text":"\u611f\u8c22\u5404\u4f4d\u5bf9 HttpRunner \u7684\u8d5e\u52a9\u652f\u6301\uff01","title":"\u8d5e\u52a9\u5546"},{"location":"sponsors/#gold-sponsor","text":"\u970d\u683c\u6c83\u5179\u6d4b\u8bd5\u5f00\u53d1\u5b66\u793e \u662f\u4e1a\u754c\u9886\u5148\u7684\u6d4b\u8bd5\u5f00\u53d1\u6280\u672f\u9ad8\u7aef\u6559\u80b2\u54c1\u724c\uff0c\u96b6\u5c5e\u4e8e \u6d4b\u5427\uff08\u5317\u4eac\uff09\u79d1\u6280\u6709\u9650\u516c\u53f8 \u3002\u5b66\u9662\u8bfe\u7a0b\u7531\u4e00\u7ebf\u5927\u5382\u6d4b\u8bd5\u7ecf\u7406\u4e0e\u8d44\u6df1\u6d4b\u8bd5\u5f00\u53d1\u4e13\u5bb6\u53c2\u4e0e\u7814\u53d1\uff0c\u5b9e\u6218\u9a71\u52a8\u3002\u8bfe\u7a0b\u6db5\u76d6 web/app \u81ea\u52a8\u5316\u6d4b\u8bd5\u3001\u63a5\u53e3\u6d4b\u8bd5\u3001\u6027\u80fd\u6d4b\u8bd5\u3001\u5b89\u5168\u6d4b\u8bd5\u3001\u6301\u7eed\u96c6\u6210/\u6301\u7eed\u4ea4\u4ed8/DevOps\uff0c\u6d4b\u8bd5\u5de6\u79fb&\u53f3\u79fb\u3001\u7cbe\u51c6\u6d4b\u8bd5\u3001\u6d4b\u8bd5\u5e73\u53f0\u5f00\u53d1\u3001\u6d4b\u8bd5\u7ba1\u7406\u7b49\u5185\u5bb9\uff0c\u5e2e\u52a9\u6d4b\u8bd5\u5de5\u7a0b\u5e08\u5b9e\u73b0\u6d4b\u8bd5\u5f00\u53d1\u6280\u672f\u8f6c\u578b\u3002\u901a\u8fc7\u4f18\u79c0\u7684\u5b66\u793e\u5236\u5ea6\uff08\u5956\u5b66\u91d1\u3001\u5185\u63a8\u8fd4\u5b66\u8d39\u3001\u884c\u4e1a\u7ade\u8d5b\u7b49\u591a\u79cd\u65b9\u5f0f\uff09\u6765\u5b9e\u73b0\u5b66\u5458\u3001\u5b66\u793e\u53ca\u7528\u4eba\u4f01\u4e1a\u7684\u4e09\u65b9\u5171\u8d62\u3002 \u8fdb\u5165\u6d4b\u8bd5\u5f00\u53d1\u6280\u672f\u80fd\u529b\u6d4b\u8bc4!","title":"\u91d1\u724c\u8d5e\u52a9\u5546\uff08Gold Sponsor\uff09"},{"location":"sponsors/#open-source-sponsor","text":"HttpRunner is in Sentry Sponsored plan.","title":"\u5f00\u6e90\u670d\u52a1\u8d5e\u52a9\u5546\uff08Open Source Sponsor\uff09"},{"location":"sponsors/#_2","text":"\u5982\u679c\u4f60\u6240\u5728\u7684\u516c\u53f8\u6216\u4e2a\u4eba\u4e5f\u60f3\u5bf9 HttpRunner \u8fdb\u884c\u8d5e\u52a9\uff0c\u53ef\u53c2\u8003\u5982\u4e0b\u65b9\u6848\uff0c\u5177\u4f53\u53ef\u8054\u7cfb \u9879\u76ee\u4f5c\u8005 \u3002 \u7b49\u7ea7 \u91d1\u724c\u8d5e\u52a9\u5546 \uff08Gold Sponsor\uff09 \u94f6\u724c\u8d5e\u52a9\u5546 \uff08Silver Sponsor\uff09 \u4e2a\u4eba\u8d5e\u8d4f \u91d1\u989d \uffe520000/\u5e74 \uffe58000/\u5e74 \u4efb\u610f \u6743\u76ca \u516c\u53f8 logo\uff08\u5927\uff09\u548c\u94fe\u63a5\u5c55\u793a\u5728 README.md 200 \u5b57\u7684\u5ba3\u4f20\u6587\u6848 \u516c\u53f8 logo\uff08\u4e2d\uff09\u548c\u94fe\u63a5\u5c55\u793a\u5728 README.md 80 \u5b57\u7684\u5ba3\u4f20\u6587\u6848 \u4e2a\u4eba ID \u548c\u94fe\u63a5\u5c55\u793a\u5728 sponsors.md","title":"\u6210\u4e3a\u8d5e\u52a9\u5546"},{"location":"cmd/hrp/","text":"hrp \u00b6 One-stop solution for HTTP(S) testing. Synopsis \u00b6 hrp (HttpRunner+) is the next generation for HttpRunner. Enjoy! \u2728 \ud83d\ude80 \u2728 License: Apache-2.0 Github: https://github.com/httprunner/hrp Copyright 2021 debugtalk Options \u00b6 -h, --help help for hrp SEE ALSO \u00b6 hrp boom - run load test with boomer hrp har2case - Convert HAR to json/yaml testcase files hrp run - run API test Auto generated by spf13/cobra on 19-Nov-2021 \u00b6","title":"hrp"},{"location":"cmd/hrp/#hrp","text":"One-stop solution for HTTP(S) testing.","title":"hrp"},{"location":"cmd/hrp/#synopsis","text":"hrp (HttpRunner+) is the next generation for HttpRunner. Enjoy! \u2728 \ud83d\ude80 \u2728 License: Apache-2.0 Github: https://github.com/httprunner/hrp Copyright 2021 debugtalk","title":"Synopsis"},{"location":"cmd/hrp/#options","text":"-h, --help help for hrp","title":"Options"},{"location":"cmd/hrp/#see-also","text":"hrp boom - run load test with boomer hrp har2case - Convert HAR to json/yaml testcase files hrp run - run API test","title":"SEE ALSO"},{"location":"cmd/hrp/#auto-generated-by-spf13cobra-on-19-nov-2021","text":"","title":"Auto generated by spf13/cobra on 19-Nov-2021"},{"location":"cmd/hrp_boom/","text":"hrp boom \u00b6 run load test with boomer Synopsis \u00b6 run yaml/json testcase files for load test hrp boom [flags] Examples \u00b6 $ hrp boom demo.json # run specified json testcase file $ hrp boom demo.yaml # run specified yaml testcase file $ hrp boom examples/ # run testcases in specified folder Options \u00b6 --cpu-profile string Enable CPU profiling. --cpu-profile-duration duration CPU profile duration. (default 30s) -h, --help help for boom --max-rps int Max RPS that boomer can generate, disabled by default. --mem-profile string Enable memory profiling. --mem-profile-duration duration Memory profile duration. (default 30s) --request-increase-rate string Request increase rate, disabled by default. (default \"-1\") --run-tasks string Run tasks without connecting to the master, multiply tasks is separated by comma. Usually, it's for debug purpose. --spawn-count int The number of users to spawn for load testing (default 1) --spawn-rate float The rate for spawning users (default 1) SEE ALSO \u00b6 hrp - One-stop solution for HTTP(S) testing. Auto generated by spf13/cobra on 19-Nov-2021 \u00b6","title":"hrp_boom"},{"location":"cmd/hrp_boom/#hrp-boom","text":"run load test with boomer","title":"hrp boom"},{"location":"cmd/hrp_boom/#synopsis","text":"run yaml/json testcase files for load test hrp boom [flags]","title":"Synopsis"},{"location":"cmd/hrp_boom/#examples","text":"$ hrp boom demo.json # run specified json testcase file $ hrp boom demo.yaml # run specified yaml testcase file $ hrp boom examples/ # run testcases in specified folder","title":"Examples"},{"location":"cmd/hrp_boom/#options","text":"--cpu-profile string Enable CPU profiling. --cpu-profile-duration duration CPU profile duration. (default 30s) -h, --help help for boom --max-rps int Max RPS that boomer can generate, disabled by default. --mem-profile string Enable memory profiling. --mem-profile-duration duration Memory profile duration. (default 30s) --request-increase-rate string Request increase rate, disabled by default. (default \"-1\") --run-tasks string Run tasks without connecting to the master, multiply tasks is separated by comma. Usually, it's for debug purpose. --spawn-count int The number of users to spawn for load testing (default 1) --spawn-rate float The rate for spawning users (default 1)","title":"Options"},{"location":"cmd/hrp_boom/#see-also","text":"hrp - One-stop solution for HTTP(S) testing.","title":"SEE ALSO"},{"location":"cmd/hrp_boom/#auto-generated-by-spf13cobra-on-19-nov-2021","text":"","title":"Auto generated by spf13/cobra on 19-Nov-2021"},{"location":"cmd/hrp_har2case/","text":"hrp har2case \u00b6 Convert HAR to json/yaml testcase files Synopsis \u00b6 Convert HAR to json/yaml testcase files hrp har2case harPath... [flags] Options \u00b6 -h, --help help for har2case -d, --output-dir string specify output directory, default to the same dir with har file -j, --to-json convert to JSON format (default) -y, --to-yaml convert to JSON format SEE ALSO \u00b6 hrp - One-stop solution for HTTP(S) testing. Auto generated by spf13/cobra on 19-Nov-2021 \u00b6","title":"hrp_har2case"},{"location":"cmd/hrp_har2case/#hrp-har2case","text":"Convert HAR to json/yaml testcase files","title":"hrp har2case"},{"location":"cmd/hrp_har2case/#synopsis","text":"Convert HAR to json/yaml testcase files hrp har2case harPath... [flags]","title":"Synopsis"},{"location":"cmd/hrp_har2case/#options","text":"-h, --help help for har2case -d, --output-dir string specify output directory, default to the same dir with har file -j, --to-json convert to JSON format (default) -y, --to-yaml convert to JSON format","title":"Options"},{"location":"cmd/hrp_har2case/#see-also","text":"hrp - One-stop solution for HTTP(S) testing.","title":"SEE ALSO"},{"location":"cmd/hrp_har2case/#auto-generated-by-spf13cobra-on-19-nov-2021","text":"","title":"Auto generated by spf13/cobra on 19-Nov-2021"},{"location":"cmd/hrp_run/","text":"hrp run \u00b6 run API test Synopsis \u00b6 run yaml/json testcase files for API test hrp run path... [flags] Examples \u00b6 $ hrp run demo.json # run specified json testcase file $ hrp run demo.yaml # run specified yaml testcase file $ hrp run examples/ # run testcases in specified folder Options \u00b6 -h, --help help for run -p, --proxy-url string set proxy url -s, --silent disable logging request & response details SEE ALSO \u00b6 hrp - One-stop solution for HTTP(S) testing. Auto generated by spf13/cobra on 19-Nov-2021 \u00b6","title":"hrp_run"},{"location":"cmd/hrp_run/#hrp-run","text":"run API test","title":"hrp run"},{"location":"cmd/hrp_run/#synopsis","text":"run yaml/json testcase files for API test hrp run path... [flags]","title":"Synopsis"},{"location":"cmd/hrp_run/#examples","text":"$ hrp run demo.json # run specified json testcase file $ hrp run demo.yaml # run specified yaml testcase file $ hrp run examples/ # run testcases in specified folder","title":"Examples"},{"location":"cmd/hrp_run/#options","text":"-h, --help help for run -p, --proxy-url string set proxy url -s, --silent disable logging request & response details","title":"Options"},{"location":"cmd/hrp_run/#see-also","text":"hrp - One-stop solution for HTTP(S) testing.","title":"SEE ALSO"},{"location":"cmd/hrp_run/#auto-generated-by-spf13cobra-on-19-nov-2021","text":"","title":"Auto generated by spf13/cobra on 19-Nov-2021"}]}